
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User  {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username            String        @unique
  fullname            String?
  email               String        @unique
  phone               String?
  password            String
  two_fa              Boolean?      @default(false)
  email_verified      DateTime?     
  image               String?
  status              String        @default("ACTIVE")
  role                UserRole[]
  profile             Profile?
  verification_token  VerificationToken[]
  session_token       Session[]
  accounts            Account[]
  audit_log           AuditLog[]

  created_at           DateTime      @default(now()) @db.Timestamptz(6)
  updated_at           DateTime      @updatedAt()

  @@index([username, email], map: "User_Index_00")
}

model Profile {
  id             Int       @id @default(autoincrement())
  user_id        String    @unique @db.Uuid
  firstname      String
  second_name    String?
  last_name      String
  second_surname String?
  birthday       DateTime?
  gender         String?
  metadata       Json?
  locality_id    Int?
  picture        String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  user           User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "Profile_Index_00")
}

model Account {
  user_id             String   @db.Uuid
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
 
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
 
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
 
  @@id([provider, provider_account_id])
}

model Role {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  user          UserRole[]

  @@index([name], map: "Roles_Index_00")
}

model UserRole {
  id            Int      @id @default(autoincrement())
  user_id       String   @db.Uuid
  rol_id        Int
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  rol           Role     @relation(fields: [rol_id], references: [id])
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, rol_id], map: "User_Roles_Index_00")
}


model VerificationToken  {
  session_token   String   @unique
  code            Int?
  identifier      String   @db.Uuid
  expires         DateTime
  ip              String?  
  user            User     @relation(fields: [identifier], references: [id], onDelete: Cascade)

  @@index([session_token], map: "Service_token_Index_00")
}


model Session  {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String   @db.Uuid
  session_token   String   @unique
  expires         Int
  last_activity   DateTime?
  is_active       Boolean  @default(true)
  ip              String?  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model AuditLog {
  id              Int       @id @default(autoincrement())
  user_id         String?   @db.Uuid // Puede ser nulo para eventos no relacionados con usuarios
  action          String    // Descripción de la acción (ej. "login_failed", "password_changed", "role_updated")
  timestamp       DateTime  @default(now()) // Marca de tiempo del evento
  ip              String?   // Dirección IP desde donde se realizó la acción
  details         Json?     // Detalles adicionales sobre el evento (opcional)
  
  user            User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([timestamp], map: "AuditLog_Timestamp_Index")
  @@index([user_id, action, timestamp], map: "AuditLog_UserAction_Index") // Índice adicional para búsquedas rápidas
}

