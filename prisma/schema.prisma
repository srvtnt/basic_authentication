
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model users {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username       String        @unique
  fullname       String?
  email          String        @unique
  phone          String?
  password       String
  metadata       Json?
  lastpass       Json?
  expirepass     DateTime
  force_new_pass Boolean       @default(false)
  status         String        @default("ACTIVE")
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
  updated_at     DateTime      @default(now()) @db.Timestamptz(6)
  rol            users_roles[]

  @@index([username, email], map: "User_Index_00")
}

model roles {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime      @default(now()) @db.Timestamptz(6)
  user        users_roles[]

  @@index([name], map: "Roles_Index_00")
}

model users_roles {
  id         Int      @id @default(autoincrement())
  user_id    String   @db.Uuid
  rol_id     Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  rol        roles    @relation(fields: [rol_id], references: [id])
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, rol_id], map: "User_Roles_Index_00")
}



model states {
  id             Int              @id @default(autoincrement())
  name           String
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  localities     localities[]
  municipalities municipalities[]
  parishes       parishes[]

  @@index([id, name], map: "States_Index_00")
}

model municipalities {
  id         Int          @id @default(autoincrement())
  name       String
  state_id   Int
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  updated_at DateTime     @default(now()) @db.Timestamptz(6)
  localities localities[]
  states     states       @relation(fields: [state_id], references: [id], onDelete: Cascade)
  parishes   parishes[]

  @@index([id, name, state_id], map: "Municipalities_Index_00")
}

model parishes {
  id              Int            @id @default(autoincrement())
  name            String
  state_id        Int
  municipality_id Int
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime       @default(now()) @db.Timestamptz(6)
  localities      localities[]
  municipality    municipalities @relation(fields: [municipality_id], references: [id], onDelete: Cascade)
  states          states         @relation(fields: [state_id], references: [id], onDelete: Cascade)

  @@index([id, name, municipality_id], map: "Parishes_Index_00")
}

model localities {
  id              Int              @id @default(autoincrement())
  state_id        Int
  municipality_id Int
  parish_id       Int
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @default(now()) @db.Timestamptz(6)
  municipalities  municipalities   @relation(fields: [municipality_id], references: [id], onDelete: Cascade)
  parishes        parishes         @relation(fields: [parish_id], references: [id], onDelete: Cascade)
  states          states           @relation(fields: [state_id], references: [id], onDelete: Cascade)

  @@index([state_id, municipality_id, parish_id], map: "Localities_Index_00")
}

model data_saime {
  id             Int       @id @default(autoincrement())
  nationality    String
  cedula         Int
  firstname      String?
  second_name    String?
  last_name      String?
  second_surname String?
  birthday       DateTime?
  gender         String?
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@index([cedula], map: "Data_Saime_Index_00")
}

model categories {
  id              Int              @id @default(autoincrement())
  group           String
  name            String
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @default(now()) @db.Timestamptz(6)

}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view localities_full {
  id              Int @unique
  state_id        Int?
  state           String?
  municipality_id Int?
  municipality    String?
  parish_id       Int?
  parish          String?
  full_location   String?

}